//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: TabState
//   Authors: Nordgaren
//   Version: 1
//   Purpose: Parses a TabState file for Windows
//            11 Notepad.
//  ID Bytes: NP
//
//------------------------------------------------

//------------------------------------------------
//                   Structs
//------------------------------------------------

enum <ubyte> State { 
    Saved = 1, 
    Unsaved = 0 
};

typedef struct {
    uint16  magic       <comment="Header Magic = 0x504E",format=hex>;
    ubyte   unk;
    State   state       <comment="state of the file">;
} Header <style=sHeading1>;

typedef struct {
    do {
        ubyte bytes;
    } while (bytes > 0x7F);
} Uleb128 <bgcolor=cRed, read=Uleb128ValueToStr>;

typedef struct {
    Uleb128  size                       <comment="Size of the buffer",format=hex>;
    ushort buffer[DecodeUleb128(size)]  <bgcolor=cBlue>;
} TabStateBuffer <style=sHeading1>;

enum <ubyte> Encoding { 
    ANSI = 1,
    UTF16LE = 2,
    UTF16BE = 3,
    UTF8BOM = 4,
    UTF8 = 5,
};

enum <ubyte> CarriageType { 
    CRLF = 1,
    Unix = 3,
};

typedef struct {
    Encoding encoding           <bgcolor=0x00FFFF>;
    CarriageType carriage_type  <bgcolor=0xFFFF00>;
    Uleb128 file_time;   
    ubyte content_hash[0x20]    <bgcolor=0xFF00AA, format=hex>;
    ubyte unk; 
    ubyte unk2;
} Metadata <bgcolor=cGreen>;

typedef struct { 
    Uleb128 cursor_start                <comment="Cursor Start Position.">;
    Uleb128 cursor_end                  <comment="Cursor End Position.">;
} CursorData;

typedef struct {
    ubyte word_wrap;
    ubyte right_to_left;
    ubyte show_unicode_control;
    ubyte unk;
} TabStateOptions <bgcolor=cWhite>;

typedef struct {
    ubyte unk;
    uint32 crc32 <format=hex>;
} Footer <bgcolor=0xFFFF00>;

//------------------------------------------------
//                   Funcs
//------------------------------------------------

uint64 DecodeUleb128(Uleb128 &varint) {
    local uint64 val = 0;
    local int i;
    local uint64 num;
    for( i = 0; i < sizeof(varint); i++ ) {
        num = varint.bytes[i] & 0x7F;
        val |= num << (i * 7);
    }
    return val;
}

string Uleb128ValueToStr(Uleb128 &varint) {
    return Str("0x%X", DecodeUleb128(varint));
}

//------------------------------------------------
//                   Parse
//------------------------------------------------

Header header;

if (header.state == 1) {
    // File Path
    TabStateBuffer path             <comment="UTF-16 representation of the file path for this tabs underlying file.">;
    
    // Unmodified buffer size
    Uleb128 full_buffer_size        <comment="Full size of the text buffer, including missing characters for carriage return, etc.">;
    Metadata metadata;
}

// Cursor
CursorData cursor                   <comment="Cursor Start and End Position. Same position if no selection">;
TabStateOptions options;

// Main Text Buffer
TabStateBuffer buffer               <comment="Full size of the following text buffer.">;

Footer footer;

if (!FEof()) {
       Uleb128 unk;
}
